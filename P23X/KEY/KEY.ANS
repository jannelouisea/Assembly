Test date: 09/21/16  13:21:30 
The number of times you used the grading program is 1 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Key Grading System Version 4.1
Student: Last=Ave                  First=Janne Louise         Type=Individual          
Grading and testing history log
       User Test.    Date: 09/19/16  23:06:29  keyboard     test         
       User Test.    Date: 09/19/16  23:07:23  nt           test         
       User Test.    Date: 09/21/16  13:17:58  keyboard     test         
       User Test.    Date: 09/21/16  13:18:22  keyboard     test         
   *** Grading Run.  Date: 09/21/16  13:21:30 
Running test
Test ran correctly.
++ Grade ++   60 = Points earned for correct answers.

-> A major reason for programming in assembler is to maximize efficiency.
This can be instructions written and/or instructions executed.
Please read the section in the class notes titled Code Complexity.

We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
20 points for   0 -  20  
15 points for  21 -  22  
10 points for  23 -  24 
05 points for  25 -  26 
00 points for  27+      
Your actual counts are:
Lines .......  87    Comments ...  54    Labels .......   3   
Directives ..   6    Variables ..   9    Executables ..  15    McCabe ..   3 
++ Grade ++   20 = Points earned for code written efficiency.  

The McCabe number for your KEY.ASM is 3 which is considered 
fine for the KEY assignment and indicates reasonable program structure.

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0026 The program header format is adequate. 
DOCHB-1.40 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
     4  = Number of user tests.                                  
     1  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC86&k~C6&juiC86&zuzC766&Zkyz&jgzk@&6?58757<&&79@87@96&

Building the file key.ans for electronic submission...
;-----------------------------------------------------------------
;   program:    KEY *MASM* version
;
;   function:   Reads printable characters (20h-7Fh) from the Standard Input
;               (keyboard or a redirected ASCII text file) without echo 
;               (using ah=08h and int 21h). The characters are processed one
;               at a time, immediately, as the are read the program will
;               if the character is transformed and/or printed to standard
;               output. The program ends when the user enters a period.
;		The only characters that will be printed onto the screen are
;		alphabetical chars, a blank space, and a period. In addition to
; 		print nay uppercase letter, if a lowercase letter is inputed then
;		the character will be set to print out its uppercase.
;
;   input:	The program is initialized by typing in 'KEY' into the commaned line.
;		Fromt then the user enters data by preseeing any key on the keyboard.
;		As long as the user has not specified a period the program will keep
;		on running.
;
;   owner:      Janne Louise Ave (jfave)
;
;   date:       09/21/16
;
;   09/19/16    First lines written
;   09/21/16	Added more information to the header
;------------------------------------------------
	.model	small				; 64k code and 64k data
      	.8086					; only allow 8086 instructions
      	.stack	256				; reserve 256 bytes for the stack
;------------------------------------------------
      	.data					; start the data segment
;------------------------------------------------
; Translate-table
; tran is a table with 256 entries (0 - 255)
; Whatever ASCII char the user entered will be translated into a different char
; based on the table
; Any char translated to '*' will not be printed out by the program
;------------------------------------------------
tran	db	32	dup	('*')		; for ASCII chars (0 - 31) = '*'
	db	' '				; set 32 = ' '
	db	13	dup	('*')		; for ASCII chars (33 - 45) = '*'	
	db	'.'				; set 46 = '.'
	db      18	dup	('*')		; set ASCII chars (47 - 64) = '*'	
	db	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'	; chars 65 - 90 = letters (A - Z)
	db	6	dup	('*')		; for ASCII chars (91 - 96) = '*'
	db	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'	; chars 97 - 122 = letters (A - Z)
	db 	133	dup	('*')		; for ASCII chars (123 - 255) = '*'
;------------------------------------------------
	.code					; 
;-----------------------------------------------
; Initialize program execution
;----------------------------------------
start:					;
	mov	ax,@data		; establish addressability to the 
	mov	ds,ax			; data segment for this program
	mov 	bx,offset tran		; bx points to the table
;----------------------------------------
; Read in characters from the Standard Input
;----------------------------------------
getchars:				;
	mov		ah,8		; set ah = 8 to request a character
					; w/out echo
	int		21h		; call DOS and the character will be
					; returned in al
	xlat				; translate the char
	cmp 	al,'*'			; if the char is translated to a '*'
	je	getchars		; yes, char will not get printed out
;----------------------------------------
	mov		dl,al		; move char stored in al from input
					; call to the data register for printing
	mov		ah,2		; set ah=2 to request a character to
					; be written
	int		21h		; call DOS and the character will be
					; written
	cmp		al,'.'		; was the character a period
	jne		getchars	; if the character was not a period
					; get the next character and repeat the
					; process
;----------------------------------------
; terminate program execution
;----------------------------------------
exit:					;
         mov		ax,4c00h	; set correct exit code in ax
         int       	21h		; int 21h will terminate program
         end       	start		; execution begins at the label start
;----------------------------------------

