Microsoft (R) Macro Assembler Version 6.11		    10/02/16 18:39:02
expr.asm						     Page 1 - 1


				;-----------------------------------------------------------------
				;   program:    EXPR *MASM* version
				;
				;   function:   The program dtermines the validity of a simple expression.
				;
				;   input:	The program is initialized by typing in 'EXPR' into the commaned line.
				;		ASCII text files are inputs for the program and all output for the
				;		program will be directed to a text file.
				;
				;   owner:      Janne Louise Ave (jfave)
				;
				;   date:       10/01/2016
				;
				;   10/01/16    First lines written
				;   10/02/16	Translate table works!
				;----------------------------------------------------------------
					.model	small						; 64k code and 64k data
				      	.8086							; only allow 8086 instructions
				      	.stack	256						; reserve 256 bytes for the stack
				;----------------------------------------------------------------
 0000				      	.data							; start the data segment
				;----------------------------------------------------------------
				; Initializes variables used in the program
				;----------------------------------------------------------------
 0000 1A			end_file	db	1Ah					; If program raches EOF exit out of program
 0001 4C 49 4E 45 20 49		validmsg	db	'LINE IS VALID',13,10,13,10,'$'		; message for valid expression
       53 20 56 41 4C 49
       44 0D 0A 0D 0A 24
 0013 49 4E 56 41 4C 49		infmt		db	'INVALID FORMAT',13,10,13,10,'$'	; message for exxpression with invalid format
       44 20 46 4F 52 4D
       41 54 0D 0A 0D 0A
       24
 0026 49 4E 56 41 4C 49		invar		db	'INVALID VARIABLE',13,10,13,10,'$'	; message for expression with invlalid variable
       44 20 56 41 52 49
       41 42 4C 45 0D 0A
       0D 0A 24
				;----------------------------------------------------------------
				; Translate-table
				; tran is a table with 256 entries (0 - 255)
				; ASCII Characters from 0h to 1Fh will be translated
				; into an '*' char, EXCLUDING CR & LF (0Ah 0Dh)
				; Characters through 20h through 7F will be assigned 
				; a number value based on what input they count as:
				; Valid Operand (A - Z) -> 1
				; Space: ' ' -> 2 
				; Valid Operator (+ - =) -> 3
				; Carriage Return: 0Dh -> 4
				; Other -> 5
				; Values 128 - 166 will corresponding to values from
				; a statetransiton table made from a Finite State Machine 
				; for this program.
				; There are 8 states that are translated froma FSm to the XLAT Table
				; State 0: Start of Line 			-> Decimal Value 128
				; State 1: Looking for Operand (Start of Line) 	-> Decimal Value 134
				; State 2: Looking for Operand (Middle of Line)	-> Decimal Value 140
				; State 3: Started an Operand			-> Decimal Value 146
				; State 4: Looking for Operator			-> Decimal Value 152
				; State 5: Started an Operator			-> Decimal Value 158
				; State 6: Line is Valid			-> Decimal Value 164
				; State 7: Invalid Format			-> Decimal Value 165
				; State 8: Invaid Variable			-> Decimal Value 166
				;----------------------------------------------------------------
 003B  000D [			tran	db	13	dup	('*')				; for ASCII chars (0-12) -> '*'
        2A
       ]
 0048  04				db	(4)						; Carriage Return char (CR) -> Decimal value 4	
 0049  0012 [				db	18	dup	('*')				; for ASCII chars (14-31) -> '*'
        2A
       ]
 005B  02				db	(2)						; Space char ( ) -> Decimal value 2
 005C  000A [				db	10	dup	(5)				; ASCII chars (33-42) are invlaid inputs -> 
        05
       ]
												; Decimal value 5
 0066  03				db	(3)						; '+' is a Valid Operator -> Decimal value 3
 0067  05				db	(5)						; ',' is an Invalid Input (Other) ->
												; Decimal value 5
 0068  03				db	(3)						; '-' is a Valid Operator -> Decimal value 3
 0069  000F [				db	15	dup	(5)				; ASCII chars (46-60) are invalid inputs ->
        05
       ]
												; Decimal value 5
 0078  03				db	(3)						; '=' is a Valid Operator -> Decimal value 3
 0079  0003 [				db 	3	dup	(5)				; ASCII chars (62-64) are invalid inputs ->
        05
       ]
												; Decimal value 5 
 007C  001A [				db	26	dup	(1)				; 'A'-'Z' are Valid Operands -> Decimal value 1
        01
       ]
 0096  0025 [				db	37	dup	(5)				; ASCII chars (91-127) are invalid inputs ->
        05
       ]
												; Decimal value 5
 00BB  80				db	(128)						; 128 -> State 0
 00BC  92				db	(146)						; 129 -> State 0 + Valid Operand 	= State 3
 00BD  86				db	(134)						; 130 -> State 0 + Space 		= State 1 
 00BE  A5				db	(165)						; 131 -> State 0 + Valid Operator	= State 7
 00BF  A4				db	(164)						; 132 -> State 0 + CR			= State 6
 00C0  A5				db	(165)						; 133 -> State 0 + Other		= State 7
												;
 00C1  86				db	(134) 						; 134 -> State 1
 00C2  92				db	(146)						; 135 -> State 1 + Valid Operand 	= State 3
 00C3  86				db	(134)						; 136 -> State 1 + Space 		= State 1 
 00C4  A5				db	(165)						; 137 -> State 1 + Valid Operator	= State 7
 00C5  A4				db	(164)						; 138 -> State 1 + CR			= State 6
 00C6  A5				db	(165)						; 139 -> State 1 + Other		= State 7
						        					;
 00C7  8C				db	(140)						; 140 -> State 2
 00C8  92				db	(146)						; 141 -> State 2 + Valid Operand 	= State 3
 00C9  8C				db	(140)						; 142 -> State 2 + Space 		= State 2 
 00CA  A5				db	(165)						; 143 -> State 2 + Valid Operator	= State 7
 00CB  A5				db	(165)						; 144 -> State 2 + CR			= State 7
 00CC  A5				db	(165)						; 145 -> State 2 + Other		= State 7
						        					;
 00CD  92				db	(146)						; 146 -> State 3
 00CE  A6				db	(166)						; 147 -> State 3 + Valid Operand 	= State 8
 00CF  98				db	(152)						; 148 -> State 3 + Space 		= State 4 
 00D0  A6				db	(166)						; 149 -> State 3 + Valid Operator	= State 8
 00D1  A4				db	(164)						; 150 -> State 3 + CR			= State 6
 00D2  A6				db	(166)						; 151 -> State 3 + Other		= State 8
						        					;
 00D3  98				db	(152)						; 152 -> State 4
 00D4  A5				db	(165)						; 153 -> State 4 + Valid Operand 	= State 7
 00D5  98				db	(152)						; 154 -> State 4 + Space 		= State 4 
 00D6  9E				db	(158)						; 155 -> State 4 + Valid Operator	= State 5
 00D7  A4				db	(164)						; 156 -> State 4 + CR			= State 6
 00D8  A5				db	(165)						; 157 -> State 4 + Other		= State 7
				
 00D9  9E				db	(158)						; 158 -> State 5
 00DA  A5				db	(165)						; 159 -> State 5 + Valid Operand 	= State 7
 00DB  8C				db	(140)						; 160 -> State 5 + Space 		= State 2 
 00DC  A5				db	(165)						; 161 -> State 5 + Valid Operator	= State 7
 00DD  A5				db	(165)						; 162 -> State 5 + CR			= State 7
 00DE  A5				db	(165)						; 163 -> State 5 + Other		= State 7
						        					;
 00DF  A4				db	(164)						; 164 -> State 6
 00E0  A5				db	(165)						; 165 -> State 7
 00E1  A6				db	(166)						; 166 -> State 8
												;
 00E2  0059 [				db	89	dup	('*')				; ASCII chars (161-255) -> '*'
        2A
       ]
				;----------------------------------------------------------------
 0000					.code							; 
				;----------------------------------------------------------------
				; Initialize program execution
				;----------------------------------------------------------------
 0000				start:								;
 0000  B8 ---- R			mov		ax,@data				; establish addressability to the 
 0003  8E D8				mov		ds,ax					; data segment for this program
 0005  BB 003B R			mov 		bx,offset tran				; bx points to the table
				;----------------------------------------------------------------
				; Set state to start at 128 (Start of New Line)
				;----------------------------------------------------------------
 0008				newexpr:							;
 0008  B1 80				mov		cl,128					; set the current state to start at State 0
				;----------------------------------------------------------------
				; Read/Echo/Process Line
				;----------------------------------------------------------------
 000A				verify:								;
 000A  B4 08				mov		ah,8					; set ah=1 to request a character with out echo
 000C  CD 21				int		21h					; call DOS and the character will be returned in al
												; the character read and echoed is now in the al register
 000E  8A D0				mov		dl,al					; copy char recieved into dl
 0010  B4 02				mov		ah,2					; set ah=2 to request a character written
 0012  CD 21				int		21h					; call DOS and the character in dl will be written	
				;----------------------------------------------------------------
 0014  3A 06 0000 R			cmp		al,[end_file]				; Has EOF been 
 0018  74 5B				je		exit					; If so go to exit
 001A  D7				xlat							; translate input character
 001B  02 C1				add		al,cl					; add translated char to current state to get new state
 001D  72 44				jc		error					; if an unsigned overflow occured then go to error
 001F  D7				xlat							; translate new state
 0020  8A C8				mov		cl,al					; set translated state (in al) to current state
 0022  80 F9 A3				cmp		cl,163					; compare current state to 157 (number before end states)
 0025  77 02				ja		endstate				; if state was greater than 157 go to end state
 0027  76 E1				jbe		verify					; if state was not one of the end states (158-160) read in next char
				;----------------------------------------------------------------
				; An End State has been reached
				; First print out the rest of the character until
				; LF has been reached
				;----------------------------------------------------------------
 0029				endstate:							;
 0029  B4 08				mov		ah,8					; set ah=1 to request a character with out echo
 002B  CD 21				int		21h					; call DOS and the character will be returned in al
												; the character read and echoed is now in the al register
 002D  8A D0				mov		dl,al					; copy char recieved into dl
 002F  B4 02				mov		ah,2					; set ah=2 to request a character written
				;----------------------------------------------------------------
 0031  CD 21				int		21h					; call DOS and the character in dl will be written	
 0033  3C 0A				cmp		al,10					; Was the last character LF? 
 0035  74 02				je		whichmessage				; If so go print out message
 0037  75 F0				jne		endstate				; If not keep on reading the rest of the input
				;----------------------------------------------------------------
				; Print a message
				; If end state 164 -> Print 'LINE IS VALID'
				; If end state 165 -> Print 'INVALID FORMAT'
				; If end state 166 -> Print 'INVALID VARIABLE'
				;----------------------------------------------------------------
 0039				whichmessage:							;		
 0039  80 F9 A4				cmp		cl,164					; Was the end state -> State 5?
 003C  74 0A				je		validexpr				; if so go to valid exprssion
 003E  80 F9 A5				cmp		cl,165					; Was the end state -> State 6?
 0041  74 0E				je		infmtexpr				; if so go to invalid format expression
 0043  80 F9 A6				cmp 		cl,166					; Was the end state -> State 7?
 0046  74 12				je		invarexpr				; if so go to invalid message expression
				;----------------------------------------------------------------
				; Expression was valid point dx to valid expression message
				;----------------------------------------------------------------
 0048				validexpr:							;
 0048  BA 0001 R			mov		dx, offset validmsg			; dx points to valid expression message
 004B  B4 09				mov		ah,9					; set ah=9 to request to write a string
 004D  CD 21				int 		21h					; call DOS and print message
 004F  EB B7				jmp		newexpr					; read in inputs for next line
				;----------------------------------------------------------------
				; Expression was invalid point dx to invalid format expression message
				;----------------------------------------------------------------
 0051				infmtexpr:							;
 0051  BA 0013 R			mov		dx, offset infmt			; dx points to valid expression message
 0054  B4 09				mov		ah,9					; set ah=9 to request to write a string
 0056  CD 21				int 		21h					; call DOS and print message
 0058  EB AE				jmp		newexpr					; read in inputs for next line
				;----------------------------------------------------------------
				; Expression was invalid point dx to invalid variable expression message
				;----------------------------------------------------------------
 005A				invarexpr:							;
 005A  BA 0026 R			mov		dx, offset invar			; dx points to valid expression message
 005D  B4 09				mov		ah,9					; set ah=9 to request to write a string
 005F  CD 21				int 		21h					; call DOS and print message
 0061  EB A5				jmp		newexpr					; read in inputs for next line
				;----------------------------------------------------------------
				; Unsigned overflow occured
				;----------------------------------------------------------------
 0063				error:								;
 0063 4F 76 65 72 66 6C			errormsg	db	'Overflow$'			; message for unsigned overflow
       6F 77 24
 006C  BA 0063 R			mov		dx, offset errormsg			; dx points to error message
 006F  B4 09				mov		ah,9					; set ah=9 to request to write a string
 0071  CD 21				int 		21h					; call DOS and print message
 0073  EB 00				jmp		exit					; terminate program
				;----------------------------------------------------------------
				; Terminate program execution
				;----------------------------------------------------------------
 0075				exit:								;
 0075  B8 4C00			         mov		ax,4c00h				; set correct exit code in ax
 0078  CD 21			         int       	21h					; int 21h will terminate program
				         end       	start					; execution begins at the label start
				;----------------------------------------------------------------
Microsoft (R) Macro Assembler Version 6.11		    10/02/16 18:39:02
expr.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 013B	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0100	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 007A	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
end_file . . . . . . . . . . . .	Byte	 0000	  _DATA	
endstate . . . . . . . . . . . .	L Near	 0029	  _TEXT	
errormsg . . . . . . . . . . . .	Byte	 0063	  _TEXT	
error  . . . . . . . . . . . . .	L Near	 0063	  _TEXT	
exit . . . . . . . . . . . . . .	L Near	 0075	  _TEXT	
infmtexpr  . . . . . . . . . . .	L Near	 0051	  _TEXT	
infmt  . . . . . . . . . . . . .	Byte	 0013	  _DATA	
invarexpr  . . . . . . . . . . .	L Near	 005A	  _TEXT	
invar  . . . . . . . . . . . . .	Byte	 0026	  _DATA	
newexpr  . . . . . . . . . . . .	L Near	 0008	  _TEXT	
start  . . . . . . . . . . . . .	L Near	 0000	  _TEXT	
tran . . . . . . . . . . . . . .	Byte	 003B	  _DATA	
validexpr  . . . . . . . . . . .	L Near	 0048	  _TEXT	
validmsg . . . . . . . . . . . .	Byte	 0001	  _DATA	
verify . . . . . . . . . . . . .	L Near	 000A	  _TEXT	
whichmessage . . . . . . . . . .	L Near	 0039	  _TEXT	

	   0 Warnings
	   0 Errors
